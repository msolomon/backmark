// Generated by CoffeeScript 1.8.0
chrome.runtime.onInstalled.addListener(function(event) {
  console.log("just installed, running full backup");
  return runMissingBackup();
});

chrome.bookmarks.onCreated.addListener(function(id, bookmark) {
  console.log("bookmark created, running full backup");
  return runMissingBackup();
});

chrome.bookmarks.onRemoved.addlistener(function(id, info) {
  console.log("bookmark removed, deleting entry");
  if (info.hasOwnProperty('node') && info.node.hasOwnProperty('url')) {
    return removeEntry(info.node.url);
  } else {
    return console.log('not removing entry, newer Chrome required');
  }
});

chrome.bookmarks.onChanged.addListener(function(id, info) {
  console.log("bookmark changed, running full backup");
  return runMissingBackup();
});

chrome.bookmarks.onMoved.addListener(function(id, info) {
  console.log("bookmark moved, running full backup");
  return runMissingBackup();
});

chrome.runtime.onMessage.addListener(function(req, sender, sendResponse) {
  var urls;
  if (req.msg === 'partialBackup') {
    urls = req.urls;
    console.log('user requested backup of:', urls);
    return getBookmarks().then(function(bookmarks) {
      return _.filter(bookmarks, function(b) {
        return _.includes(urls, b.url);
      });
    }).then(function(bookmarks) {
      return runBackup(bookmarks, true);
    }).then(function() {
      console.log('responding');
      return sendResponse({
        msg: 'backupComplete'
      });
    });
  } else if (req.msg === 'missingBackup') {
    console.log('user requested missing backup:', urls);
    return runMissingBackup().then(function() {
      console.log('responding');
      return sendResponse({
        msg: 'backupComplete'
      });
    });
  } else if (req.msg === 'partialDownload') {
    urls = req.urls;
    console.log('user requested download of:', urls);
    return getPrefixed(urls, 'bookmark::').then(function(urlsToUris) {
      return mkFullBundle(urlsToUris);
    }).then(function(bundle) {
      console.log('bundled', bundle);
      return downloadPage(bundle, "backmark");
    }).then(function() {
      console.log('responding');
      return sendResponse({
        msg: 'downloadComplete'
      });
    });
  }
});

//# sourceMappingURL=backmark.js.map
